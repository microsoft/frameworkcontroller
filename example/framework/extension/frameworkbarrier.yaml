# For the full spec setting and usage, see ./pkg/apis/frameworkcontroller/v1/types.go
# For the full frameworkbarrier usage, see ./pkg/barrier/barrier.go

############################### Prerequisite ###################################
# See "[PREREQUISITE]" in this file.
################################################################################
apiVersion: frameworkcontroller.microsoft.com/v1
kind: Framework
metadata:
  name: frameworkbarrier
spec:
  executionType: Start
  retryPolicy:
    fancyRetryPolicy: true
    maxRetryCount: 0
  taskRoles:
  - name: server
    taskNumber: 10
    frameworkAttemptCompletionPolicy:
      minFailedTaskCount: 1
      minSucceededTaskCount: -1
    task:
      retryPolicy:
        fancyRetryPolicy: false
        maxRetryCount: 0
      pod:
        spec:
          restartPolicy: Never
          containers:
          - name: ubuntu
            image: ubuntu:trusty
            # Using /mnt/frameworkbarrier/injector.sh to inject environment variables,
            # such as:
            # FB_{UpperCase({TaskRoleName})}_IPS=
            #   {Task[0].PodIP},...,
            #   {Task[TaskRole.TaskNumber-1].PodIP}
            # FB_{UpperCase({TaskRoleName})}_ADDRESSES=
            #   {Task[0].PodIP}:${FB_{UpperCase({TaskRoleName})}_PORT},...,
            #   {Task[TaskRole.TaskNumber-1].PodIP}:${FB_{UpperCase({TaskRoleName})}_PORT}
            #  Note, the environment variable FB_{UpperCase({TaskRoleName})}_PORT should be
            #  provided by the caller in advance.
            #
            # User may need to tweak these environment variables to its own
            # input format.
            #
            # User can also write its own injector script to inject other
            # Framework information from the Framework object file:
            # /mnt/frameworkbarrier/framework.json.
            command: [
            "sh", "-c",
            "FB_SERVER_PORT=4001 FB_WORKER_PORT=5001 . /mnt/frameworkbarrier/injector.sh && printenv &&
            FB_SERVER_PORT=4002 FB_WORKER_PORT=5002 . /mnt/frameworkbarrier/injector.sh && printenv &&
            sleep 60"]
            ports:
            - containerPort: 4001
            - containerPort: 4002
            volumeMounts:
            - name: frameworkbarrier-volume
              mountPath: /mnt/frameworkbarrier
          # [PREREQUISITE]
          # User needs to create a service account in the same namespace of this
          # Framework with granted permission for frameworkbarrier, if the k8s
          # cluster enforces authorization.
          # For example, if the cluster enforces RBAC:
          #   kubectl create serviceaccount frameworkbarrier --namespace default
          #   kubectl create clusterrole frameworkbarrier \
          #     --verb=get,list,watch \
          #     --resource=frameworks
          #   kubectl create clusterrolebinding frameworkbarrier \
          #     --clusterrole=frameworkbarrier \
          #     --user=system:serviceaccount:default:frameworkbarrier
          serviceAccountName: frameworkbarrier
          initContainers:
          - name: frameworkbarrier
            # Using official image to demonstrate this example.
            image: frameworkcontroller/frameworkbarrier
            # Using k8s inClusterConfig, so usually, no need to specify
            # KUBE_APISERVER_ADDRESS or KUBECONFIG
            #env:
            #- name: KUBE_APISERVER_ADDRESS
            #  value: {http[s]://host:port}
            #- name: KUBECONFIG
            #  value: {Pod Local KubeConfig File Path}
            volumeMounts:
            - name: frameworkbarrier-volume
              mountPath: /mnt/frameworkbarrier
          volumes:
          - name: frameworkbarrier-volume
            emptyDir: {}
  - name: worker
    taskNumber: 10
    frameworkAttemptCompletionPolicy:
      minFailedTaskCount: 1
      minSucceededTaskCount: -1
    task:
      retryPolicy:
        fancyRetryPolicy: false
        maxRetryCount: 0
      pod:
        spec:
          restartPolicy: Never
          containers:
          - name: ubuntu
            image: ubuntu:trusty
            command: [
            "sh", "-c",
            "FB_SERVER_PORT=4001 FB_WORKER_PORT=5001 . /mnt/frameworkbarrier/injector.sh && printenv &&
            FB_SERVER_PORT=4002 FB_WORKER_PORT=5002 . /mnt/frameworkbarrier/injector.sh && printenv &&
            sleep 60"]
            ports:
            - containerPort: 5001
            - containerPort: 5002
            volumeMounts:
            - name: frameworkbarrier-volume
              mountPath: /mnt/frameworkbarrier
          # [PREREQUISITE]
          # Same as server TaskRole.
          serviceAccountName: frameworkbarrier
          initContainers:
          - name: frameworkbarrier
            image: frameworkcontroller/frameworkbarrier
            #env:
            #- name: KUBE_APISERVER_ADDRESS
            #  value: {http[s]://host:port}
            #- name: KUBECONFIG
            #  value: {Pod Local KubeConfig File Path}
            volumeMounts:
            - name: frameworkbarrier-volume
              mountPath: /mnt/frameworkbarrier
          volumes:
          - name: frameworkbarrier-volume
            emptyDir: {}
